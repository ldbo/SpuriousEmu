///////////////////////////////////  TOKENS  ///////////////////////////////////


///////////////////////////
// Physical Line Grammar //
///////////////////////////

LINE_TERMINATOR: "\r\n" | "\t" | "\n" | "\u2028" | "\u2029"


//////////////////////////
// Logical Line Grammar //
//////////////////////////

// Blanks
WSCS: WSC+
WSC: TAB_CHARACTER | SPACE | EOM | DBCS_WHITESPACE // TODO: add most-Unicode-class-Zs
LINE_CONTINUATION: UNDERSCORE WSC* LINE_TERMINATOR
TAB_CHARACTER: "\t"
SPACE: " "
EOM: "\x19"
DBCS_WHITESPACE: "\u3000"
UNDERSCORE: "_"

// Comment
COMMENT_BODY: /.+/

////////////////////////////
// Lexical Tokens Grammar //
////////////////////////////

// Number tokens

INTEGER: INTEGER_LITERAL [PERCENT | AMP | CARET]
INTEGER_LITERAL: DECIMAL_LITERAL | OCTAL_LITERAL | HEX_LITERAL
DECIMAL_LITERAL: DECIMAL_DIGIT+
OCTAL_LITERAL: AMP ["O" | "o"] OCTAL_DIGIT+
HEX_LITERAL: AMP ["H" | "h"] HEX_DIGIT+
OCTAL_DIGIT: /[0-7]/
DECIMAL_DIGIT: OCTAL_DIGIT | "8" | "9"
HEX_DIGIT: DECIMAL_DIGIT | /[a-fA-F]/

FLOAT: FLOATING_POINT_LITERAL [FLOATING_POINT_TYPE_SUFFIX]
     | DECIMAL_LITERAL FLOATING_POINT_TYPE_SUFFIX
FLOATING_POINT_LITERAL: DECIMAL_LITERAL EXPONENT
                      | DECIMAL_LITERAL DOT [DECIMAL_LITERAL] [EXPONENT]
                      | DOT DECIMAL_LITERAL [EXPONENT]
EXPONENT: EXPONENT_LETTER [SIGN] DECIMAL_LITERAL
EXPONENT_LETTER: "d" | "D" | "e" | "E"
SIGN: "+" | "-"
FLOATING_POINT_TYPE_SUFFIX: EXCLAMATION | SHARP | AT

// Date tokens

date_or_time: (date_value WSCS time_value)
            | date_value
            | time_value

date_value: LEFT_DATE_VALUE DATE_SEPARATOR MIDDLE_DATE_VALUE [DATE_SEPARATOR RIGHT_DATE_VALUE]
LEFT_DATE_VALUE: DECIMAL_LITERAL
               | MONTH_NAME
MIDDLE_DATE_VALUE: DECIMAL_LITERAL
                 | MONTH_NAME
RIGHT_DATE_VALUE: DECIMAL_LITERAL
                | MONTH_NAME
DATE_SEPARATOR: WSCS
              | WSCS (SLASH | MINUS | COMMA) WSCS
MONTH_NAME: JANUARY | FEBRUARY | MARCH | APRIL | MAY | JUNE | AUGUST | SEPTEMBER
          | OCTOBER | NOVEMBER | DECEMBER
time_value: HOUR_VALUE AMPM
          | HOUR_VALUE TIME_SEPARATOR MINUTE_VALUE [TIME_SEPARATOR SECOND_VALUE] [AMPM]
HOUR_VALUE: DECIMAL_LITERAL
MINUTE_VALUE: DECIMAL_LITERAL
SECOND_VALUE: DECIMAL_LITERAL
TIME_SEPARATOR: WSCS (COLON | DOT) WSCS
AMPM: WSCS ("am" | "pm" | "a" | "p")

JANUARY: "january" | "jan"
FEBRUARY: "february" | "feb"
MARCH: "march" | "mar"
APRIL: "april" | "apr"
MAY: "may" | "jun"
JUNE: "june" | "jul"
AUGUST: "august" | "aug"
SEPTEMBER: "september" | "sep"
OCTOBER: "october" | "oct"
NOVEMBER: "november" | "nov"
DECEMBER: "december" | "dec"

// String tokens

STRING: DOUBLE_QUOTE STRING_CHARACTER* DOUBLE_QUOTE
STRING_CHARACTER: /[^"]/ | /""/

// Identifier tokens

LEXICAL_IDENTIFIER: LATIN_IDENTIFIER // TODO: handle non-latin identifiers
                                     // TODO: add case insensitivity
LATIN_IDENTIFIER: FIRST_LATIN_IDENTIFIER_CHARACTER SUBSEQUENT_LATIN_IDENTIFIER_CHARACTER*
FIRST_LATIN_IDENTIFIER_CHARACTER: /[a-zA-Z]/
SUBSEQUENT_LATIN_IDENTIFIER_CHARACTER: FIRST_LATIN_IDENTIFIER_CHARACTER
                                     | DECIMAL_DIGIT
                                     | UNDERSCORE

FOREIGN_NAME: LBRACKET FOREIGN_IDENTIFIER RBRACKET
FOREIGN_IDENTIFIER: /.+/

// Punctuation
COMMA: ","
DOT: "."
EXCLAMATION: "!"
QUESTION: "?"
SHARP: "#"
AMP: "&"
LPAREN: "("
RPAREN: ")"
LBRACKET: "["
RBRACKET: "]"
COLON: ":"
SEMICOLON: ";"
PERCENT: "%"
SINGLE_QUOTE: "'"
DOUBLE_QUOTE: "\""
AT: "@"
DOLLAR: "$"
AFFECTATION: ":="

// Operators
PLUS: "+"
MINUS: "-"
MUL: "*"
SLASH: "/"
ANTISLASH: "\\"
CARET: "^"
MOD: "Mod"
LE: "<=" | "=<"
GE: ">=" | "=>"
LT: "<"
GT: ">"
EQ: "="
NEQ: "<>" | "><"
LIKE: "Like"
IS: "Is"
IMP: "Imp"
EQV: "Eqv"
XOR: "Xor"
OR: "Or"
AND: "And"
NOT: "Not"
ADDRESSOF: "AddressOf"
NEW: "New"
TYPEOF: "TypeOf"

// Keywords
CALL: "Call"
CASE: "Case"
CLOSE: "Close"
CONST: "Const"
DECLARE: "Declare"
DEFBOOL: "DefBool"
DEFBYTE: "DefByte"
DEFCUR: "DefCur"
DEFDATE: "DefDate"
DEFDBL: "DefDbl"
DEFINT: "DefInt"
DEFLNG: "DefLng"
DEFLNGLNG: "DefLngLng"
DEFLNGPTR: "DefLngPtr"
DEFOBJ: "DefObj"
DEFSNG: "DefSng"
DEFSTR: "DefStr"
DEFVAR: "DefVar"
DIM: "Dim"
DO: "Do"
ELSE: "Else"
ELSEIF: "ElseIf"
END: "End"
ENDIF: "EndIf"
ENUM: "Enum"
ERASE: "Erase"
EVENT: "Event"
EXIT: "Exit"
FOR: "For"
FRIEND: "Friend"
FUNCTION: "Function"
GET: "Get"
GLOBAL: "Global"
GOSUB: "GoSub"
GOTO: "GoTo"
IF: "If"
IMPLEMENTS: "Implements"
INPUT: "Input"
LET: "Let"
LOCK: "Lock"
LOOP: "Loop"
LSET: "LSet"
NEXT: "Next"
ON: "On"
OPEN: "Open"
OPTION: "Option"
PRINT: "Print"
PRIVATE: "Private"
PUBLIC: "Public"
PUT: "Put"
RAISEEVENT: "RaiseEvent"
REDIM: "ReDim"
REM: "Rem"
RESUME: "Resume"
RETURN: "Return"
RSET: "RSet"
SEEK: "Seek"
SELECT: "Select"
SET: "Set"
STATIC: "Static"
STOP: "Stop"
SUB: "Sub"
TYPE: "Type"
UNLOCK: "Unlock"
WEND: "Wend"
WHILE: "While"
WITH: "With"
WRITE: "Write"

ANY: "Any"
AS: "As"
BYREF: "ByRef"
BYVAL: "ByVal"
EACH: "Each"
IN: "In"
SHARED: "Shared"
UNTIL: "Until"
WITHEVENTS: "WithEvents"
OPTIONAL: "Optional"
PARAMARRAY: "ParamArray"
PRESERVE: "Preserve"
SPC: "Spc"
TAB: "Tab"
THEN: "Then"
TO: "To"

DATE: "Date"
ME: "Me"

BOOLEAN: "Boolean"
BYTE: "Byte"
CURRENCY: "Currency"
DOUBLE: "Double"
INTEGER_KW: "Integer"
LONG: "Long"
LONGLONG: "LongLong"
LONGPTR: "LongPtr"
SINGLE: "Single"
STRING_KW: "String"
VARIANT: "Variant"
FOREIGN_VARIANT: "[Variant]"

TRUE: "True"
FALSE: "False"
NOTHING: "Nothing"
EMPTY: "Empty"
NULL: "Null"

ATTRIBUTE:  "Attribute"
LINEINPUT:  "LINEINPUT"
VB_BASE:  "VB_Base"
VB_CONTROL:  "VB_Control"
VB_CREATABLE:  "VB_Creatable"
VB_CUSTOMIZABLE:  "VB_Customizable"
VB_DESCRIPTION:  "VB_Description"
VB_EXPOSED:  "VB_Exposed"
VB_EXT_KEY:  "VB_Ext_KEY"
VB_GLOBALNAMESPACE:  "VB_GlobalNameSpace"
VB_HELPID:  "VB_HelpID"
VB_INVOKE_FUNC:  "VB_Invoke_Func"
VB_INVOKE_PROPERTY:  "VB_Invoke_Property "
VB_INVOKE_PROPERTYPUT:  "VB_Invoke_PropertyPut"
VB_INVOKE_PROPERTYPUTREF:  "VB_Invoke_PropertyPutRef"
VB_MEMBERFLAGS: "VB_MemberFlags"
VB_NAME:  "VB_Name"
VB_PREDECLAREDID:  "VB_PredeclaredId"
VB_PROCDATA:  "VB_ProcData"
VB_TEMPLATEDERIVED:  "VB_TemplateDerived"
VB_USERMEMID:  "VB_UserMemId"
VB_VARDESCRIPTION:  "VB_VarDescription"
VB_VARHELPID:  "VB_VarHelpID"
VB_VARMEMBERFLAGS:  "VB_VarMemberFlags"
VB_VARPROCDATA:  "VB_VarProcData "
VB_VARUSERMEMID:  "VB_VarUserMemId"

ALIAS: "Alias"
BASE: "Base"
BINARY: "Binary"
CLASS_INITIALIZE: "Class_Initialize"
CLASS_TERMINATE: "Class_Terminate"
COMPARE: "Compare"
ERROR: "Error"
EXPLICIT: "Explicit"
LIB: "Lib"
MODULE: "Module"
OBJECT: "object" | "[object]"
PROPERTY: "Property"
PTRSAFE: "PtrSafe"
TEXT: "Text"


//////////////////////////////////  RULES   ////////////////////////////////////


//////////////////////////
// Logical Line Grammar //
//////////////////////////

ws: WSCS [ws_line_continuation]
ws_line_continuation: WSCS LINE_CONTINUATION+

////////////////////////////
// Lexical Tokens Grammar //
////////////////////////////

// Separators
eol: [ws] (comment | LINE_TERMINATOR)
eos: (WSC* COLON | eol)+
eof: [ws] [last_comment | LINE_TERMINATOR]
comment: SINGLE_QUOTE COMMENT_BODY LINE_TERMINATOR
last_comment: SINGLE_QUOTE COMMENT_BODY [LINE_TERMINATOR]


// Identifiers
identifier: LEXICAL_IDENTIFIER // TODO: Verify that we don't care if it's reserved or not
// identifier: reserved_identifier // A reserved identifier will be matched first
//           | LEXICAL_IDENTIFIER


RESERVED_TYPE_IDENTIFIER: BOOLEAN | BYTE | CURRENCY | DATE | DOUBLE | INTEGER
                        | LONG | LONGLONG | LONGPTR | SINGLE | STRING_KW
                        | VARIANT

literal_identifier: boolean_literal_identifier
                  | object_literal_identifier
                  | variant_literal_identifier
boolean_literal_identifier: TRUE | FALSE
object_literal_identifier: NOTHING
variant_literal_identifier: EMPTY | NULL

builtin_type: RESERVED_TYPE_IDENTIFIER
            | LBRACKET RESERVED_TYPE_IDENTIFIER RBRACKET
            | OBJECT

typed_name: identifier type_suffix
type_suffix: PERCENT | AMP | CARET | EXCLAMATION | SHARP | AT | DOLLAR


//////////////////////
// Module Structure //
//////////////////////

module: procedural_module
      | class_module

procedural_module: procedural_module_header procedural_module_body
class_module: class_module_header class_module_body

// Header
procedural_module_header: ATTRIBUTE ws VB_NAME ws EQ ws quoted_identifier eol
class_module_header: class_attr+
class_attr: ATTRIBUTE (VB_NAME EQ quoted_identifier
                     | VB_CREATABLE EQ FALSE
                     | VB_PREDECLAREDID EQ FALSE
                     | VB_EXPOSED EQ boolean_literal_identifier
                     | VB_CUSTOMIZABLE EQ boolean_literal_identifier)

// Check that the content is an identifier on runtime
quoted_identifier: STRING

/////////////////
// Module Body //
/////////////////

procedural_module_body: procedural_module_declaration_section procedural_module_code_section
class_module_body: class_module_declaration_section class_module_code_section

// There is no unrestricted_name, validity is checked on runtime
name: untyped_name
    | typed_name
untyped_name: identifier
            | FOREIGN_NAME

// 5.2 Declaration section
procedural_module_declaration_section: [pm_directives] eol* [pm_declarations eol*]
class_module_declaration_section: [cm_directives] eol* [cm_declarations eol*]

pm_directives: statement_list{procedural_module_directive_element}
cm_directives: statement_list{class_module_directive_element}
pm_declarations: procedural_module_declaration_element_no_dir statement_list{procedural_module_declaration_element}
cm_declarations: class_module_declaration_element_no_dir statement_list{class_module_declaration_element}

procedural_module_directive_element: common_option_directive
                                   | option_private_directive
                                   | def_directive
class_module_directive_element: common_option_directive
                              | def_directive
                              | implements_directive

procedural_module_declaration_element_no_dir: common_module_declaration_element
                                            | global_variable_declaration
                                            | public_const_declaration
                                            | public_type_declaration
                                            | public_external_procedure_declaration
                                            | global_enum_declaration
class_module_declaration_element_no_dir: common_module_declaration_element
                                       | event_declaration
procedural_module_declaration_element: procedural_module_declaration_element_no_dir
                                     | common_option_directive
                                     | option_private_directive
class_module_declaration_element: class_module_declaration_element_no_dir
                                | common_option_directive
                                | implements_directive

// Option directives

common_option_directive: option_compare_directive
                       | option_base_directive
                       | option_explicit_directive
                       | rem_statement

option_compare_directive: OPTION ws COMPARE ws (BINARY | TEXT)
option_base_directive: OPTION ws BASE ws INTEGER
option_explicit_directive: OPTION ws EXPLICIT
option_private_directive: OPTION ws PRIVATE ws MODULE

def_directive: def_type ws letter_spec *(ws COMMA ws letter_spec)
letter_spec: single_letter
           | letter_range
single_letter: /[a-zA-Z]/
letter_range: single_letter ws MINUS ws single_letter
def_type: DEFBOOL | DEFBYTE | DEFCUR | DEFDATE | DEFDBL | DEFINT | DEFLNG
        | DEFLNGLNG | DEFLNGPTR | DEFOBJ | DEFSNG | DEFSTR | DEFVAR

// Declaration elements

common_module_declaration_element: module_variable_declaration
                                 | private_const_declaration
                                 | private_type_declaration
                                 | enum_declaration
                                 | private_external_procedure_declaration

module_variable_declaration: public_variable_declaration
                           | private_variable_declaration
global_variable_declaration: GLOBAL ws variable_declaration_list
public_variable_declaration: PUBLIC ws [SHARED] ws module_variable_declaration_list
private_variable_declaration: (PRIVATE | DIM) ws [SHARED ws] module_variable_declaration_list
module_variable_declaration_list: (withevents_variable_dcl | variable_dcl) (ws COMMA ws (withevents_variable_dcl | variable_dcl))*
variable_declaration_list: variable_dcl (ws COMMA ws variable_dcl)*

variable_dcl: typed_variable_dcl | untyped_variable_dcl
typed_variable_dcl: typed_name [ws array_dim]
untyped_variable_dcl: identifier [ws (array_clause | as_clause)]
array_clause: array_dim [ws as_clause]
as_clause: as_auto_object
         | as_type

withevents_variable_dcl: WITHEVENTS ws identifier ws AS ws class_type_name
class_type_name: defined_type_expression

array_dim: LPAREN [ws bounds_list ws] RPAREN
bounds_list: dim_spec *(ws COMMA ws dim_spec)
dim_spec: [constant_expression ws TO ws] constant_expression

as_auto_object: AS ws NEW ws class_type_name
as_type: AS ws type_spec
type_spec: fixed_length_string_spec
         | type_expression
fixed_length_string_spec: STRING_KW ws MUL ws string_length
string_length: simple_name_expression
             | INTEGER

public_const_declaration: (GLOBAL | PUBLIC) ws module_const_declaration
private_const_declaration: [PRIVATE ws] module_const_declaration
module_const_declaration: const_declaration
const_declaration: CONST ws const_item_list
const_item_list: const_item (ws COMMA ws const_item)*
const_item: typed_name_const_item
          | untyped_name_const_item
typed_name_const_item: typed_name ws EQ ws constant_expression
untyped_name_const_item: identifier [ws const_as_clause] ws EQ ws constant_expression
const_as_clause: AS ws builtin_type

public_type_declaration: [(GLOBAL | PUBLIC) ws] udt_declaration
private_type_declaration: PRIVATE ws udt_declaration
udt_declaration: TYPE ws untyped_name eos udt_member_list eos END ws TYPE
udt_member_list: ws udt_element *[eos ws udt_element]
udt_element: rem_statement
           | udt_member
udt_member: identifier ws [array_dim ws] as_clause

global_enum_declaration: GLOBAL ws enum_declaration
public_enum_declaration: [PUBLIC ws] enum_declaration
private_enum_declaration: PRIVATE ws enum_declaration
enum_declaration: ENUM ws untyped_name eos ws enum_member_list eos ws END ws ENUM
enum_member_list: ws enum_element *[eos ws enum_element]
enum_element: rem_statement
            | enum_member
enum_member: untyped_name [ws EQ ws constant_expression]

public_external_procedure_declaration: [PUBLIC ws] external_proc_dcl
private_external_procedure_declaration: PRIVATE ws external_proc_dcl
external_proc_dcl: DECLARE ws [PTRSAFE ws] (external_sub | external_function)
external_sub: SUB ws subroutine_name ws lib_info [ws procedure_parameters]
external_function: FUNCTION ws function_name ws lib_info [ws procedure_parameters] [ws function_type]
lib_info: lib_clause [ws alias_clause]
lib_clause: LIB ws STRING
alias_clause: ALIAS ws STRING

// Class module declaration

implements_directive: IMPLEMENTS ws class_type_name

event_declaration: [PUBLIC ws] EVENT ws identifier [ws event_parameter_list]
event_parameter_list: LPAREN ws [positional_parameters] ws RPAREN

// 5.3 Code section
// procedural_module_code_section: statement_block // TODO Remove
// class_module_code_section: statement_block // TODO Remove

procedural_module_code_section: statement_list{procedural_module_code_element}
class_module_code_section: statement_list{class_module_code_element}
procedural_module_code_element: common_module_code_element
class_module_code_element: common_module_code_element
                         | implements_directive
common_module_code_element: rem_statement
                          | procedure_declaration
procedure_declaration: subroutine_declaration
                     | function_declaration
                     | property_get_declaration
                     | property_lhs_declaration

subroutine_declaration: sub_header eos [procedure_body eos] sub_footer
function_declaration: function_header eos [procedure_body eos] function_footer
property_get_declaration: property_get_header [procedure_body eos] property_footer
property_lhs_declaration: property_lhs_header [procedure_body eos] property_footer
sub_header: [procedure_scope ws] [STATIC ws] SUB ws subroutine_name [[ws] procedure_parameters] [ws STATIC]
function_header: [procedure_scope ws] [STATIC ws] FUNCTION ws function_name [[ws] procedure_parameters] [ws function_type] [ws STATIC]
property_get_header: [procedure_scope ws] [STATIC ws] PROPERTY ws GET ws function_name [[ws] procedure_parameters] [ws function_type] [ws STATIC]
property_lhs_header: [procedure_scope ws] [STATIC ws] PROPERTY ws (LET | SET) ws subroutine_name procedure_parameters [ws STATIC]
sub_footer: END ws SUB // TODO: add end_label
function_footer: END ws FUNCTION // TODO: add end_label
property_footer: END ws PROPERTY // TODO: add end_label
//end_label: statement_label_definition // TODO: add back

procedure_scope: GLOBAL | PUBLIC | PRIVATE | FRIEND

subroutine_name: identifier
               | lifecycle_handler_name
function_name: typed_name
             | subroutine_name
// Removed prefixed name

function_type: AS ws type_expression [ws array_designator]
array_designator: LPAREN ws RPAREN

procedure_parameters: LPAREN ws? [parameter_list] ws RPAREN
parameter_list: positional_parameters [ws] COMMA [ws] optional_parameters
              | positional_parameters [[ws] COMMA [ws] param_array]
              | optional_parameters
              | param_array
positional_parameters: positional_param (ws COMMA ws positional_param)*
optional_parameters: optional_param (ws COMMA ws optional_param)
positional_param: [parameter_mechanism ws] param_dcl
optional_param: optional_prefix param_dcl [ws default_value]
param_array: PARAMARRAY ws identifier ws LPAREN ws RPAREN [ws AS ws (VARIANT | FOREIGN_VARIANT)]
param_dcl: untyped_name_param_dcl
         | typed_name_param_dcl
untyped_name_param_dcl: identifier [ws parameter_type]
typed_name_param_dcl: typed_name [ws array_designator]
optional_prefix: OPTIONAL ws parameter_mechanism
               | parameter_mechanism ws OPTIONAL
               | OPTIONAL
parameter_mechanism: BYVAL | BYREF
parameter_type: [array_designator ws] AS ws (type_expression | ANY)
default_value: EQ ws constant_expression

lifecycle_handler_name: CLASS_INITIALIZE | CLASS_TERMINATE

// 5.4 Procedure bodies and statements

procedure_body: statement_block

statement_block: statement_list{block_statement} eos
block_statement: statement_label_definition
               | rem_statement
               | statement
statement: control_statement
         | data_manipulation_statement
         | error_handling_statement
         | file_statement

statement_label_definition: identifier_statement_label ws COLON
                          | line_number_label [ws COLON]
statement_label: identifier_statement_label
               | line_number_label
statement_label_list: statement_label [ws COMMA ws statement_label]
identifier_statement_label: identifier // TODO: add static semantic
line_number_label: INTEGER

rem_statement: REM WSCS COMMENT_BODY // TODO: verify that ws does not work

// 5.4.2 Control statements

control_statement: if_statement
                 | control_statement_except_multiline_if
control_statement_except_multiline_if: call_statement
                                     | while_statement
                                     | for_statement
                                     | exit_for_statement
                                     | do_statement
                                     | exit_do_statement
                                     | single_line_if_statement
                                     | select_case_statement
                                     | stop_statement
                                     | goto_statement
                                     | on_goto_statement
                                     | gosub_statement
                                     | return_statement
                                     | on_gosub_statement
                                     | for_each_statement
                                     | exit_sub_statement
                                     | exit_function_statement
                                     | exit_property_statement
                                     | raiseevent_statement
                                     | with_statement

if_statement: IF
call_statement: CALL
while_statement: WHILE
for_statement: FOR
exit_for_statement: EXIT ws FOR
do_statement: DO
exit_do_statement: EXIT DO
single_line_if_statement: IF IF
select_case_statement: SELECT CASE
stop_statement: STOP
goto_statement: GOTO
on_goto_statement: ON GOTO
gosub_statement: GOSUB
return_statement: RETURN
on_gosub_statement: ON GOSUB
for_each_statement: FOR EACH
exit_sub_statement: EXIT
exit_function_statement: EXIT FUNCTION
exit_property_statement: EXIT PROPERTY
raiseevent_statement: RAISEEVENT
with_statement: WITH


// 5.4.3 Data manipulation statements

data_manipulation_statement: local_variable_declaration
                           | static_variable_declaration
                           | local_const_declaration
                           | redim_statement
                           | mid_statement
                           | rset_statement
                           | lset_statement
                           | let_statement
                           | set_statement


local_variable_declaration: "local_variable"
static_variable_declaration: "static_variable"
local_const_declaration: "local_const"
redim_statement: "redim"
mid_statement: "mid"
rset_statement: "rset"
lset_statement: "lset"
let_statement: "let"
set_statement: "set"


// 5.4.4 Error handling statements

error_handling_statement: on_error_statement
                        | resume_statement
                        | error_statement

on_error_statement: ON ws ERROR ws error_behavior
error_behavior: RESUME ws NEXT
              | GOTO ws statement_label

resume_statement: RESUME [ws (NEXT | statement_label)]

error_statement: ERROR ws error_number
error_number: integer_expression

// 5.4.5 File statements

file_statement: open_statement | close_statement | seek_statement
              | lock_statement | unlock_statement | line_input_statement
              | width_statement | write_statement | input_statement
              | put_statement | get_statement


open_statement: "open"
close_statement: "close"
seek_statement: "seek"
lock_statement: "lock"
unlock_statement: "unlock"
line_input_statement: "line_input"
width_statement: "width"
write_statement: "write"
input_statement: "nput"
put_statement: "put"
get_statement: "get"

// 5.6 Expressions

expression: value_expression
          | l_expression

literal_expression: INTEGER
                  | FLOAT
                  | date_or_time
                  | STRING
                  | literal_identifier [type_suffix]

// 5.6.9 Operator expressions
value_expression: logical_imp
logical_imp: logical_imp IMP logical_eqv
           | logical_eqv
logical_eqv: logical_eqv EQV logical_xor
           | logical_xor
logical_xor: logical_xor XOR logical_or
           | logical_or
logical_or: logical_or OR logical_and
          | logical_and
logical_and: logical_and AND logical_not
           | logical_not
logical_not: NOT logical_not
           | relational_expresion
relational_expresion: relational_expresion relational concatenation
                    | concatenation
concatenation: concatenation AMP additive_expression
             | additive_expression
additive_expression: additive_expression additive modulus
                   | modulus
modulus: modulus MOD integer_division
       | integer_division
integer_division: integer_division ANTISLASH mutliplicative_expression
                | mutliplicative_expression
mutliplicative_expression: mutliplicative_expression multiplicative unary_negation
                         | unary_negation
unary_negation: MINUS unary_negation
              | exponentiation
exponentiation: exponentiation CARET exponentiation
              | parenthesized_expression
parenthesized_expression: LPAREN ws expression ws RPAREN
                        | typeof_is_expression
typeof_is_expression: TYPEOF ws expression ws IS ws type_expression
                    | new_expression
new_expression: NEW ws type_expression
              | primary_expression
primary_expression: literal_expression

relational: EQ | NEQ | LE | GE | LT | GT | LIKE | IS
additive: PLUS | MINUS
multiplicative: MUL | SLASH

l_expression: instance_expression
            | member_access_expression
            | index_expression
            | dictionary_access_expression
            | with_expression

simple_name_expression: name // Restricted name
instance_expression: ME
member_access_expression: l_expression DOT name // Unrestricted name
                        | l_expression ws_line_continuation DOT name // Unrestricted name
                        | simple_name_expression
index_expression: l_expression ws LPAREN ws argument_list ws RPAREN

argument_list: [positional_argument_list | mixed_argument_list]
positional_argument_list: ([argument_expression ws] COMMA ws)* argument_expression
mixed_argument_list: ([argument_expression ws] COMMA ws)* named_argument_list
named_argument_list: named_argument (ws COMMA ws named_argument)*
named_argument: name ws AFFECTATION ws argument_expression // Unrestricted name
argument_expression: [BYVAL ws] expression
                   | addressof_expression

dictionary_access_expression: l_expression  EXCLAMATION name // Unrestricted name
                            | l_expression ws_line_continuation EXCLAMATION name // Unrestricted name
                            | l_expression ws_line_continuation EXCLAMATION ws_line_continuation name // Unrestricted name

with_expression: with_member_access_expression
               | with_dictionary_access_expression
with_member_access_expression: DOT ws name // Unrestricted name
with_dictionary_access_expression: EXCLAMATION ws name // Unrestricted name

// 5.6.16 Constrained expressions

constant_expression: expression // TODO: add static semantic
boolean_expression: expression // TODO: add static semantic
integer_expression: expression // TODO: add static semantic
variable_expression: l_expression // TODO: add static semantic
bound_variable_expression: l_expression // TODO: add static semantic
type_expression: builtin_type
               | defined_type_expression
defined_type_expression: "member_access_expression" // TODO: unquote
addressof_expression: ADDRESSOF // ws procedure_pointer_expression
// procedure_pointer_expression: member_access_expression



/////////////
// Bancale //
/////////////

statement_list{repeated_statement}: WSC* (repeated_statement eos+)*  repeated_statement
// statement_block: eol* (statement eos+)* statement eof
