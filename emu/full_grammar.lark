///////////////////////////
// Physical Line Grammar //
///////////////////////////

LINE_TERMINATOR: "\r\n" | "\t" | "\n" | "\u2028" | "\u2029"


//////////////////////////
// Logical Line Grammar //
//////////////////////////

LINE_CONTINUATION: WSC* UNDERSCORE WSC* LINE_TERMINATOR
WSC: TAB_CHARACTER | SPACE_CHARACTER | EOM_CHARACTER | DBCS_WHITESPACE // TODO: add most-Unicode-class-Zs
TAB_CHARACTER: "\t"
SPACE_CHARACTER: " "
EOM_CHARACTER: "\x19"
DBCS_WHITESPACE: "\u3000"
UNDERSCORE: "_"


////////////////////////////
// Lexical Tokens Grammar //
////////////////////////////

// Separator and special tokens

WS: (WSC | LINE_CONTINUATION)+

SPECIAL_TOKEN: "," | "." | "!" | "#" | "&" | "(" | ")" | "*" | "+" | "-" | "|"
             | ":" | ";" | "<" | "=" | ">" | "?" | "\\" | "^"
eol: [WS] (comment | LINE_TERMINATOR)
eos: (WSC* COLON | eol)+
eof: [WS] [last_comment | LINE_TERMINATOR]
comment: SINGLE_QUOTE COMMENT_BODY LINE_TERMINATOR
last_comment: SINGLE_QUOTE COMMENT_BODY [LINE_TERMINATOR]
SINGLE_QUOTE: "'"
COMMENT_BODY.-10: (/./ | WSC)+ // Doesn't work without WSC, LINE_CONTINUATION is
                           // voluntarily excluded
COLON: ":"

// Number tokens

INTEGER: INTEGER_LITERAL ["%" | "&" | "^"]
INTEGER_LITERAL: DECIMAL_LITERAL | OCTAL_LITERAL | HEX_LITERAL
DECIMAL_LITERAL: DECIMAL_DIGIT+
OCTAL_LITERAL: "&" ["O" | "o"] OCTAL_DIGIT+
HEX_LITERAL: "&" ["H" | "h"] HEX_DIGIT+
OCTAL_DIGIT: /[0-7]/
DECIMAL_DIGIT: OCTAL_DIGIT | "8" | "9"
HEX_DIGIT: DECIMAL_DIGIT | /[a-fA-F]/

FLOAT: FLOATING_POINT_LITERAL [FLOATING_POINT_TYPE_SUFFIX]
     | DECIMAL_LITERAL FLOATING_POINT_TYPE_SUFFIX
FLOATING_POINT_LITERAL: DECIMAL_LITERAL EXPONENT
                      | DECIMAL_LITERAL "." [DECIMAL_LITERAL] [EXPONENT]
                      | "." DECIMAL_LITERAL [EXPONENT]
EXPONENT: EXPONENT_LETTER [SIGN] DECIMAL_LITERAL
EXPONENT_LETTER: "d" | "D" | "e" | "E"
SIGN: "+" | "-"
FLOATING_POINT_TYPE_SUFFIX: "!" | "#" | "@"

// Date tokens

date_or_time: (date_value WSC+ time_value)
            | date_value
            | time_value

date_value: left_date_value date_separator middle_date_value [date_separator right_date_value]
left_date_value: DECIMAL_LITERAL
               | month_name
middle_date_value: DECIMAL_LITERAL
                 | month_name
right_date_value: DECIMAL_LITERAL
                | month_name
date_separator: WSC+
              | WSC+ ("/" | "-" | ",") WSC+
month_name: english_month_name | english_month_abbreviation
english_month_name: "january" | "february" | "march" | "april" | "may" | "june"
                  | "august" | "september" | "october" | "november" | "december"
english_month_abbreviation: "jan" | "feb" | "mar" | "apr" | "jun" | "jul"
                          | "aug" | "sep" | "oct" | "nov" | "dec"
time_value: HOUR_VALUE ampm
          | HOUR_VALUE time_separator MINUTE_VALUE [time_separator SECOND_VALUE] [ampm]
HOUR_VALUE: DECIMAL_LITERAL
MINUTE_VALUE: DECIMAL_LITERAL
SECOND_VALUE: DECIMAL_LITERAL
time_separator: WSC+ (":" | ".") WSC+
ampm: WSC+ ("am" | "pm" | "a" | "p")

// String tokens

STRING: DOUBLE_QUOTE STRING_CHARACTER* DOUBLE_QUOTE
DOUBLE_QUOTE: /"/
STRING_CHARACTER: /[^"]/ | /""/

// Identifier tokens

LEXICAL_IDENTIFIER: LATIN_IDENTIFIER // TODO: handle non-latin identifiers
LATIN_IDENTIFIER: FIRST_LATIN_IDENTIFIER_CHARACTER SUBSEQUENT_LATIN_IDENTIFIER_CHARACTER*
FIRST_LATIN_IDENTIFIER_CHARACTER: /[a-zA-Z]/
SUBSEQUENT_LATIN_IDENTIFIER_CHARACTER: FIRST_LATIN_IDENTIFIER_CHARACTER
                                     | DECIMAL_DIGIT
                                     | UNDERSCORE


RESERVED_IDENTIFIER: STATEMENT_KEYWORD | MARKER_KEYWORD | OPERATOR_IDENTIFIER
                   | SPECIAL_FORM | RESERVED_NAME | LITERAL_IDENTIFIER
                   | REM_KEYWORD | RESERVED_FOR_IMPLEMENTATION_USE
                   | FUTURE_RESERVED

IDENTIFIER: RESERVED_IDENTIFIER // A reserved identifier will be matched first
          | LEXICAL_IDENTIFIER

STATEMENT_KEYWORD: "Call" | "Case" |"Close" | "Const"| "Declare" | "DefBool"
                 | "DefByte" | "DefCur" | "DefDate" | "DefDbl" | "DefInt"
                 | "DefLng" | "DefLngLng" | "DefLngPtr" | "DefObj" | "DefSng"
                 | "DefStr" | "DefVar" | "Dim" | "Do" | "Else" | "ElseIf"
                 | "End" | "EndIf" | "Enum" | "Erase" | "Event" | "Exit" | "For"
                 | "Friend" | "Function" | "Get" | "Global" | "GoSub" | "GoTo"
                 | "If" | "Implements"| "Input" | "Let" | "Lock" | "Loop"
                 | "LSet" | "Next" | "On" | "Open" | "Option" | "Print"
                 | "Private" | "Public" | "Put" | "RaiseEvent" | "ReDim"
                 | "Resume" | "Return" | "RSet" | "Seek" | "Select" | "Set"
                 | "Static" | "Stop" | "Sub" | "Type" | "Unlock" | "Wend"
                 | "While" | "With" | "Write"

REM_KEYWORD: REM
MARKER_KEYWORD: "Any" | "As" | "ByRef" | "ByVal " | "Case" | "Each" | "Else"
              | "In"| "New" | "Shared" | "Until" | "WithEvents" | "Write"
              | "Optional" | "ParamArray" | "Preserve" | "Spc" | "Tab" | "Then"
              | "To"

OPERATOR_IDENTIFIER: "AddressOf" | "And" | "Eqv" | "Imp" | "Is" | "Like"
                   | "New" | "Mod" | "Not" | "Or" | "TypeOf" | "Xor"

RESERVED_NAME: "Abs" | "CBool" | "CByte" | "CCur" | "CDate" | "CDbl" | "CDec"
             | "CInt" | "CLng" | "CLngLng" | "CLngPtr" | "CSng" | "CStr"
             | "CVar" | "CVErr" | "Date" | "Debug" | "DoEvents" | "Fix" | "Int"
             | "Len" | "LenB" | "Me" | "PSet" | "Scale" | "Sgn" | "String"

SPECIAL_FORM: "Array" | "Circle" | "Input" | "InputB" | "LBound" | "Scale"
            | "UBound"

RESERVED_TYPE_IDENTIFIER: "Boolean" | "Byte" | "Currency" | "Date" | "Double"
                        | "Integer" | "Long" | "LongLong" | "LongPtr" | "Single"
                        | "String" | "Variant"

LITERAL_IDENTIFIER: BOOLEAN_LITERAL_IDENTIFIER | OBJECT_LITERAL_IDENTIFIER
                  | VARIANT_LITERAL_IDENTIFIER
BOOLEAN_LITERAL_IDENTIFIER: "True" | "False"
OBJECT_LITERAL_IDENTIFIER: "Nothing"
VARIANT_LITERAL_IDENTIFIER: "Empty" | "Null"

RESERVED_FOR_IMPLEMENTATION_USE: "Attribute" | "LINEINPUT" | "VB_Base"
                               | "VB_Control" | "VB_Creatable"
                               | "VB_Customizable" | "VB_Description"
                               | "VB_Exposed" | "VB_Ext_KEY "
                               | "VB_GlobalNameSpace" | "VB_HelpID"
                               | "VB_Invoke_Func" | "VB_Invoke_Property "
                               | "VB_Invoke_PropertyPut"
                               | "VB_Invoke_PropertyPutRefVB_MemberFlags"
                               | "VB_Name" | "VB_PredeclaredId" | "VB_ProcData"
                               | "VB_TemplateDerived" | "VB_UserMemId"
                               | "VB_VarDescription" | "VB_VarHelpID"
                               | "VB_VarMemberFlags" | "VB_VarProcData "
                               | "VB_VarUserMemId"
FUTURE_RESERVED: "CDecl" | "Decimal" | "DefDec"

FOREIGN_NAME: "[" FOREIGN_IDENTIFIER "]"
FOREIGN_IDENTIFIER: /.+/

BUILTIN_TYPE: RESERVED_TYPE_IDENTIFIER
            | "[" RESERVED_TYPE_IDENTIFIER "]"
            | "object"
            | "[object]"

TYPED_NAME: IDENTIFIER TYPE_SUFFIX
TYPE_SUFFIX: "%" | "&" | "^" | "!" | "#" | "@" | "$"


//////////////////////
// Module Structure //
//////////////////////

module: procedural_module
      | class_module

procedural_module: procedural_module_header procedural_module_body
class_module: class_module_header class_module_body

// Header
procedural_module_header: ATTRIBUTE WS "VB_Name" WS ATTR_EQ WS QUOTED_IDENTIFIER eol
class_module_header: class_attr+
class_attr: ATTRIBUTE ("VB_Name" ATTR_EQ QUOTED_IDENTIFIER
                     | "VB_Creatable" ATTR_EQ "False"
                     | "VB_PredeclaredId" ATTR_EQ "False"
                     | "VB_Exposed" ATTR_EQ BOOLEAN_LITERAL_IDENTIFIER
                     | "VB_Customizable" ATTR_EQ BOOLEAN_LITERAL_IDENTIFIER)

ATTRIBUTE: "Attribute"
ATTR_EQ: "="
QUOTED_IDENTIFIER: DOUBLE_QUOTE IDENTIFIER DOUBLE_QUOTE

/////////////////
// Module Body //
/////////////////

procedural_module_body: procedural_module_declaration_section procedural_module_code_section
class_module_body: class_module_declaration_section class_module_code_section

UNRESTRICTED_NAME: NAME
                 | RESERVED_IDENTIFIER
NAME: UNTYPED_NAME
    | TYPED_NAME
UNTYPED_NAME: IDENTIFIER
            | FOREIGN_NAME

// 5.2 Declaration section
procedural_module_declaration_section: [pm_directives] eol* [pm_declarations eol*]
class_module_declaration_section: [cm_directives] eol* [cm_declarations eol*]

pm_directives: statement_list{procedural_module_directive_element}
cm_directives: statement_list{class_module_directive_element}
pm_declarations: procedural_module_declaration_element_no_dir statement_list{procedural_module_declaration_element}
cm_declarations: class_module_declaration_element_no_dir statement_list{class_module_declaration_element}

procedural_module_directive_element: common_option_directive
                                   | option_private_directive
                                   | def_directive
class_module_directive_element: common_option_directive
                              | def_directive
                              | implements_directive

procedural_module_declaration_element_no_dir: common_module_declaration_element
                                            | global_variable_declaration
                                            | public_const_declaration
                                            | public_type_declaration
                                            | public_external_procedure_declaration
                                            | global_enum_declaration
class_module_declaration_element_no_dir: common_module_declaration_element
                                       | event_declaration
procedural_module_declaration_element: procedural_module_declaration_element_no_dir
                                     | common_option_directive
                                     | option_private_directive
class_module_declaration_element: class_module_declaration_element_no_dir
                                | common_option_directive
                                | implements_directive

// Option directives

common_option_directive: option_compare_directive
                       | option_base_directive
                       | option_explicit_directive
                       | rem_statement

option_compare_directive: "Option" WS "Compare" WS ("Binary" | "Text")
option_base_directive: "Option" WS "Base" WS INTEGER
option_explicit_directive: "Option" WS "Explicit"
option_private_directive: "Option" WS "Private" WS "Module"

def_directive: def_type WS letter_spec *(WS "," WS letter_spec)
letter_spec: single_letter
           | letter_range
single_letter: /[a-zA-Z]/
letter_range: single_letter WS "-" WS single_letter
def_type: "DefBool" | "DefByte" | "DefCur" | "DefDate" | "DefDbl" | "DefInt"
        | "DefLng" | "DefLngLng" | "DefLngPtr" | "DefObj" | "DefSng" | "DefStr"
        | "DefVar"

// Declaration elements

common_module_declaration_element: module_variable_declaration
                                 | private_const_declaration
                                 | private_type_declaration
                                 | enum_declaration
                                 | private_external_procedure_declaration

module_variable_declaration: public_variable_declaration
                           | private_variable_declaration
global_variable_declaration: "Global" WS variable_declaration_list
public_variable_declaration: "Public" WS ["Shared"] WS module_variable_declaration_list
private_variable_declaration: ("Private" | "Dim") WS ["Shared" WS] module_variable_declaration_list
module_variable_declaration_list: (withevents_variable_dcl | variable_dcl) (WS "," WS (withevents_variable_dcl | variable_dcl))*
variable_declaration_list: variable_dcl (WS "," WS variable_dcl)*

variable_dcl: typed_variable_dcl | untyped_variable_dcl
typed_variable_dcl: TYPED_NAME [WS array_dim]
untyped_variable_dcl: IDENTIFIER [WS (array_clause | as_clause)]
array_clause: array_dim [WS as_clause]
as_clause: as_auto_object | as_type

withevents_variable_dcl: "WithEvents" WS IDENTIFIER WS "As" WS class_type_name
class_type_name: defined_type_expression

array_dim: "(" [WS bounds_list WS] ")"
bounds_list: dim_spec *(WS "," WS dim_spec)
dim_spec: [constant_expression WS "To" WS] constant_expression

as_auto_object: "As" WS "New" WS class_type_name
as_type: "As" WS type_spec
type_spec: fixed_length_string_spec
         | type_expression
fixed_length_string_spec: "String" WS "*" WS string_length
string_length: simple_name_expression
             | INTEGER

public_const_declaration: ("Global" | "Public") WS module_const_declaration
private_const_declaration: ["Private" WS] module_const_declaration
module_const_declaration: const_declaration
const_declaration: "Const" WS const_item_list
const_item_list: const_item (WS "," WS const_item)*
const_item: typed_name_const_item
          | untyped_name_const_item
typed_name_const_item: TYPED_NAME WS "=" WS constant_expression
untyped_name_const_item: IDENTIFIER [WS const_as_clause] WS "=" WS constant_expression
const_as_clause: "As" WS BUILTIN_TYPE

public_type_declaration: [("Global" | "Public") WS] udt_declaration
private_type_declaration: "Private" WS udt_declaration
udt_declaration: "Type" WS UNTYPED_NAME eos udt_member_list eos "End" WS "Type"
udt_member_list: WS udt_element *[eos WS udt_element]
udt_element: rem_statement
           | udt_member
udt_member: reserved_name_member_dcl
          | untyped_name_member_dcl
untyped_name_member_dcl: IDENTIFIER WS optional_array_clause
reserved_name_member_dcl: reserved_member_name WS as_clause
optional_array_clause: [array_dim] WS as_clause
reserved_member_name: STATEMENT_KEYWORD
                    | MARKER_KEYWORD
                    | OPERATOR_IDENTIFIER
                    | SPECIAL_FORM
                    | RESERVED_NAME
                    | LITERAL_IDENTIFIER
                    | RESERVED_FOR_IMPLEMENTATION_USE
                    | FUTURE_RESERVED


global_enum_declaration: "Global" WS enum_declaration
public_enum_declaration: ["Public" WS] enum_declaration
private_enum_declaration: "Private" WS enum_declaration
enum_declaration: "Enum" WS UNTYPED_NAME eos WS enum_member_list eos WS "End" WS "Enum"
enum_member_list: WS enum_element *[eos WS enum_element]
enum_element: rem_statement
            | enum_member
enum_member: UNTYPED_NAME [WS "=" WS constant_expression]

public_external_procedure_declaration: ["Public" WS] external_proc_dcl
private_external_procedure_declaration: "Private" WS external_proc_dcl
external_proc_dcl: "Declare" WS ["PtrSafe" WS] (external_sub | external_function)
external_sub: "Sub" WS subroutine_name WS lib_info [WS procedure_parameters]
external_function: "Function" WS function_name WS lib_info [WS procedure_parameters] [WS function_type]
lib_info: lib_clause [WS alias_clause]
lib_clause: "Lib" WS STRING
alias_clause: "Alias" WS STRING

// Class module declaration

implements_directive: "Implements" WS class_type_name

event_declaration: ["Public" WS] "Event" WS IDENTIFIER [WS event_parameter_list]
event_parameter_list: "(" WS [positional_parameters] WS ")"

// 5.3 Code section
// procedural_module_code_section: statement_block // TODO Remove
// class_module_code_section: statement_block // TODO Remove

procedural_module_code_section: statement_list{procedural_module_code_element}
class_module_code_section: statement_list{class_module_code_element}
procedural_module_code_element: common_module_code_element
class_module_code_element: common_module_code_element
                         | implements_directive
common_module_code_element: rem_statement
                          | procedure_declaration
procedure_declaration: subroutine_declaration
                     | function_declaration
                     | property_get_declaration
                     | property_lhs_declaration

subroutine_declaration: sub_header eos [procedure_body eos] sub_footer
function_declaration: function_header eos [procedure_body eos] function_footer
property_get_declaration: property_get_header [procedure_body eos] property_footer
property_lhs_declaration: property_lhs_header [procedure_body eos] property_footer
sub_header: [procedure_scope WS] ["Static" WS] "Sub" WS subroutine_name [WS procedure_parameters] [WS "Static"]
function_header: [procedure_scope WS] ["Static" WS] "Function" WS function_name [WS procedure_parameters] [WS function_type] [WS "Static"]
property_get_header: [procedure_scope WS] ["Static" WS] "Property" WS "Get" WS function_name [WS procedure_parameters] [WS function_type] [WS "Static"]
property_lhs_header: [procedure_scope WS] ["Static" WS] "Property" WS ("Let" | "Set") WS subroutine_name procedure_parameters [WS "Static"]
sub_footer: "End" WS "Sub" // TODO: add end_label
function_footer: "End" WS "Function" // TODO: add end_label
property_footer: "End" WS "Property" // TODO: add end_label
//end_label: statement_label_definition // TODO: add back

procedure_scope: "Global" | "Public" | "Private" | "Friend"

subroutine_name: IDENTIFIER
               | prefixed_name
function_name: TYPED_NAME
             | subroutine_name
prefixed_name: LIFECYCLE_HANDLER_NAME
             | EVENT_HANDLER_NAME
             | IMPLEMENTED_NAME

function_type: "As" WS type_expression [WS array_designator]
array_designator: "(" WS ")"

procedure_parameters: "(" WS [parameter_list] WS ")"
parameter_list: positional_parameters WS "," WS optional_parameters
              | positional_parameters [WS "," WS param_array]
              | optional_parameters
              | param_array
positional_parameters: positional_param (WS "," WS positional_param)*
optional_parameters: optional_param (WS "," WS optional_param)
positional_param: [parameter_mechanism WS] param_dcl
optional_param: optional_prefix param_dcl [WS default_value]
param_array: "ParamArray" WS IDENTIFIER WS "(" WS ")" [WS "As" WS ("Variant" | "[Variant]")]
param_dcl: untyped_name_param_dcl
         | typed_name_param_dcl
untyped_name_param_dcl: IDENTIFIER [WS parameter_type]
typed_name_param_dcl: TYPED_NAME [WS array_designator]
optional_prefix: "Optional" WS parameter_mechanism
               | parameter_mechanism WS "Optional"
               | "Optional"
parameter_mechanism: "ByVal" | "ByRef"
parameter_type: [array_designator WS] "As" WS (type_expression | "Any")
default_value: "=" WS constant_expression

EVENT_HANDLER_NAME: IDENTIFIER // TODO: add static semantic
IMPLEMENTED_NAME: IDENTIFIER // TODO: add static semantic
LIFECYCLE_HANDLER_NAME: "Class_Initialize" | "Class_Terminate"

// 5.4 Procedure bodies and statements

procedure_body: statement_block

statement_block: statement_list{block_statement} eos
block_statement: statement_label_definition
               | rem_statement
               | statement
statement: control_statement
         | data_manipulation_statement
         | error_handling_statement
         | file_statement

statement_label_definition: identifier_statement_label WS ":"
                          | line_number_label [WS ":"]
statement_label: identifier_statement_label
               | line_number_label
statement_label_list: statement_label [WS "," WS statement_label]
identifier_statement_label: IDENTIFIER // TODO: add static semantic
line_number_label: INTEGER

rem_statement: REM WS COMMENT_BODY

// 5.4.2 Control statements

control_statement: if_statement
                 | control_statement_except_multiline_if
control_statement_except_multiline_if: call_statement
                                     | while_statement
                                     | for_statement
                                     | exit_for_statement
                                     | do_statement
                                     | exit_do_statement
                                     | single_line_if_statement
                                     | select_case_statement
                                     | stop_statement
                                     | goto_statement
                                     | on_goto_statement
                                     | gosub_statement
                                     | return_statement
                                     | on_gosub_statement
                                     | for_each_statement
                                     | exit_sub_statement
                                     | exit_function_statement
                                     | exit_property_statement
                                     | raiseevent_statement
                                     | with_statement

if_statement: "if"
call_statement: "call"
while_statement: "while"
for_statement: "for"
exit_for_statement: "exit for"
do_statement: "do"
exit_do_statement: "exit do"
single_line_if_statement: "single line if"
select_case_statement: "select case"
stop_statement: "stop"
goto_statement: "goto"
on_goto_statement: "on goto"
gosub_statement: "gosub"
return_statement: "return"
on_gosub_statement: "on gosub"
for_each_statement: "for each"
exit_sub_statement: "exit"
exit_function_statement: "exit function"
exit_property_statement: "exit property"
raiseevent_statement: "raiseevent"
with_statement: "with"


// 5.4.3 Data manipulation statements

data_manipulation_statement: local_variable_declaration
                           | static_variable_declaration
                           | local_const_declaration
                           | redim_statement
                           | mid_statement
                           | rset_statement
                           | lset_statement
                           | let_statement
                           | set_statement


local_variable_declaration: "local_variable"
static_variable_declaration: "static_variable"
local_const_declaration: "local_const"
redim_statement: "redim"
mid_statement: "mid"
rset_statement: "rset"
lset_statement: "lset"
let_statement: "let"
set_statement: "set"


// 5.4.4 Error handling statements

error_handling_statement: on_error_statement
                        | resume_statement
                        | error_statement

on_error_statement: "On" WS "Error" WS error_behavior
error_behavior: "Resume" WS "Next"
              | "Goto" WS statement_label

resume_statement: "Resume" [WS ("Next" | statement_label)]

error_statement: "Error" WS error_number
error_number: integer_expression

// 5.4.5 File statements

file_statement: open_statement | close_statement | seek_statement
              | lock_statement | unlock_statement | line_input_statement
              | width_statement | write_statement | input_statement
              | put_statement | get_statement


open_statement: "open"
close_statement: "close"
seek_statement: "seek"
lock_statement: "lock"
unlock_statement: "unlock"
line_input_statement: "line_input"
width_statement: "width"
write_statement: "write"
input_statement: "input"
put_statement: "put"
get_statement: "get"

// 5.6 Expressions

expression: value_expression
          | l_expression

literal_expression: INTEGER
                  | FLOAT
                  | date_or_time
                  | STRING
                  | LITERAL_IDENTIFIER [TYPE_SUFFIX]

// 5.6.9 Operator expressions
value_expression: logical_imp
logical_imp: logical_imp IMP logical_eqv
           | logical_eqv
logical_eqv: logical_eqv EQV logical_xor
           | logical_xor
logical_xor: logical_xor XOR logical_or
           | logical_or
logical_or: logical_or OR logical_and
          | logical_and
logical_and: logical_and AND logical_not
           | logical_not
logical_not: NOT logical_not
           | relational_expresion
relational_expresion: relational_expresion RELATIONAL concatenation
                    | concatenation
concatenation: concatenation CONCATENATION additive_expression
             | additive_expression
additive_expression: additive_expression ADDITIVE modulus
                   | modulus
modulus: modulus MOD integer_division
       | integer_division
integer_division: integer_division INTEGER_DIVISION mutliplicative_expression
                | mutliplicative_expression
mutliplicative_expression: mutliplicative_expression MULTIPLICATIVE unary_negation
                         | unary_negation
unary_negation: MINUS unary_negation
              | exponentiation
exponentiation: exponentiation EXPONENTIATION exponentiation
              | parenthesized_expression
parenthesized_expression: "(" WS expression WS ")"
                        | typeof_is_expression
typeof_is_expression: "TypeOf" WS expression WS "Is" WS type_expression
                    | new_expression
new_expression: "New" WS type_expression
              | primary_expression
primary_expression: literal_expression

IMP: "Imp"
EQV: "Eqv"
XOR: "Xor"
OR: "Or"
AND: "And"
NOT: "Not"
RELATIONAL: "=" | "<>" | "<=" | ">=" | "<" | ">" | "Like" | "Is"
CONCATENATION: "&"
ADDITIVE: "+" | "-"
MOD: "Mod"
INTEGER_DIVISION: "\\"
MULTIPLICATIVE: "*" | "/"
MINUS: "-"
EXPONENTIATION: "^"

l_expression: instance_expression
            | member_access_expression
            | index_expression
            | dictionary_access_expression
            | with_expression

simple_name_expression: NAME
instance_expression: "Me"
member_access_expression: l_expression "." UNRESTRICTED_NAME
                        | l_expression LINE_CONTINUATION "." UNRESTRICTED_NAME
                        | simple_name_expression
index_expression: l_expression WS "(" WS argument_list WS ")"

argument_list: [positional_argument_list | mixed_argument_list]
positional_argument_list: ([argument_expression WS] "," WS)* argument_expression
mixed_argument_list: ([argument_expression WS] "," WS)* named_argument_list
named_argument_list: named_argument (WS "," WS named_argument)*
named_argument: UNRESTRICTED_NAME WS ":=" WS argument_expression
argument_expression: ["ByVal" WS] expression
                   | addressof_expression

dictionary_access_expression: l_expression  "!" UNRESTRICTED_NAME
                            | l_expression LINE_CONTINUATION "!" UNRESTRICTED_NAME
                            | l_expression LINE_CONTINUATION "!" LINE_CONTINUATION UNRESTRICTED_NAME

with_expression: with_member_access_expression
               | with_dictionary_access_expression
with_member_access_expression: "." WS UNRESTRICTED_NAME
with_dictionary_access_expression: "!" WS UNRESTRICTED_NAME

// 5.6.16 Constrained expressions

constant_expression: expression // TODO: add static semantic
boolean_expression: expression // TODO: add static semantic
integer_expression: expression // TODO: add static semantic
variable_expression: l_expression // TODO: add static semantic
bound_variable_expression: l_expression // TODO: add static semantic
type_expression: BUILTIN_TYPE
               | defined_type_expression
defined_type_expression: "member_access_expression" // TODO: unquote
addressof_expression: "AddressOf" // WS procedure_pointer_expression
// procedure_pointer_expression: member_access_expression

//////////////
// Keywords //
//////////////

REM: "Rem"

/////////////
// Bancale //
/////////////

statement_list{repeated_statement}: (repeated_statement eos+)*  repeated_statement
// statement_block: eol* (statement eos+)* statement eof

// statement: "Plop"